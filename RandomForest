{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1qEVeQI6B-48q-46rO8xkQG513Ih6gY6u","timestamp":1716082374030}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Implementación del Random Forest"],"metadata":{"id":"Hrvt6vHooPzm"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"h8sAd7j0ZUzA"},"outputs":[],"source":["import numpy as np\n","from multiprocessing import Pool\n","from collections import Counter\n","from sklearn.datasets import load_iris\n","from sklearn.model_selection import train_test_split\n","from sklearn.decomposition import PCA\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import accuracy_score\n","import psutil\n","import time"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OuODpW4-HHOL","executionInfo":{"status":"ok","timestamp":1715956293334,"user_tz":300,"elapsed":1681,"user":{"displayName":"Neftali Anderson Calixto Rojas","userId":"05935871694005913024"}},"outputId":"9a1dfa86-5935-4038-fc00-36a6712a3660"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["## Preparando la data para probar nuestro modelo"],"metadata":{"id":"2HDtESYYoolb"}},{"cell_type":"code","source":["# Montar Google Drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# Importar las librerías necesarias\n","import pandas as pd\n","\n","# Ruta a los archivos\n","folder_path = '/content/drive/MyDrive/UTEC/Ciclo 5/Machine Learning/Proyectos/Proyecto Clasificacion/Extracted Features'\n","efficient_test_path = f'{folder_path}/efficient_test.csv' # Reemplazar Directamente con el CSV en la carpeta de extracted features\n","top_features_rf_path = f'{folder_path}/top_features_RandomForest.csv'\n","\n","# Leer los archivos CSV\n","efficient_test_df = pd.read_csv(efficient_test_path)\n","top_features_rf_df = pd.read_csv(top_features_rf_path)\n","\n","# Excluir la columna 'id' de top_features_rf_df\n","excluded_columns = ['id']\n","columns_rf_filtered = [col for col in top_features_rf_df.columns if col not in excluded_columns]\n","\n","# Encontrar las columnas comunes excluyendo 'label'\n","common_columns = [col for col in columns_rf_filtered if col in efficient_test_df.columns]\n","\n","# Crear un nuevo dataframe con las columnas comunes más 'label'\n","match_ef_forest = top_features_rf_df[common_columns + ['label']]\n","\n","# Crear otro dataframe test_match_forest con las mismas columnas que match_ef_forest, excluyendo 'label'\n","test_match_forest_columns = [col for col in common_columns if col in efficient_test_df.columns]\n","test_match_forest = efficient_test_df[test_match_forest_columns]\n","\n","# Guardar ambos dataframes en el folder de Google Drive\n","#match_ef_forest_path = f'{folder_path}/match_ef_forest.csv'\n","#test_match_forest_path = f'{folder_path}/test_match_forest.csv'\n","\n","#match_ef_forest.to_csv(match_ef_forest_path, index=False)\n","#test_match_forest.to_csv(test_match_forest_path, index=False)\n","\n","# Retornar el número de columnas comunes\n","num_common_columns = len(common_columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W1W2UaW0DkE1","executionInfo":{"status":"ok","timestamp":1716159474309,"user_tz":300,"elapsed":23941,"user":{"displayName":"Josué Arbulú Pastor","userId":"04973568037788770706"}},"outputId":"84d47cac-2d2b-4ca7-a37d-f5a0659d2ade"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# Mostrar resultados\n","print(f'Número de columnas comunes: {num_common_columns}')\n","match_ef_forest.head(3)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"uTiM8qkGDl7G","executionInfo":{"status":"ok","timestamp":1716159481569,"user_tz":300,"elapsed":281,"user":{"displayName":"Josué Arbulú Pastor","userId":"04973568037788770706"}},"outputId":"74d780f8-7676-41d4-c79d-db9856ee22a5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Número de columnas comunes: 630\n"]},{"output_type":"execute_result","data":{"text/plain":["   total_acc_x__c3__lag_1  \\\n","0                1.059088   \n","1                1.059527   \n","2                1.060862   \n","\n","   body_acc_x__agg_linear_trend__attr_\"stderr\"__chunk_len_5__f_agg_\"max\"  \\\n","0                                           0.000045                       \n","1                                           0.000045                       \n","2                                           0.000062                       \n","\n","   total_acc_x__change_quantiles__f_agg_\"mean\"__isabs_True__qh_1.0__ql_0.6  \\\n","0                                           0.001088                         \n","1                                           0.001119                         \n","2                                           0.001578                         \n","\n","   total_acc_x__c3__lag_3  \\\n","0                1.059019   \n","1                1.059577   \n","2                1.060927   \n","\n","   total_acc_x__cwt_coefficients__coeff_14__w_20__widths_(2, 5, 10, 20)  \\\n","0                                           2.244303                      \n","1                                           2.240700                      \n","2                                           2.240934                      \n","\n","   total_acc_x__cwt_coefficients__coeff_11__w_20__widths_(2, 5, 10, 20)  \\\n","0                                           1.947003                      \n","1                                           1.943727                      \n","2                                           1.943291                      \n","\n","   total_acc_x__mean_n_absolute_max__number_of_maxima_7  \\\n","0                                           1.022925      \n","1                                           1.023272      \n","2                                           1.025791      \n","\n","   total_acc_x__agg_linear_trend__attr_\"stderr\"__chunk_len_5__f_agg_\"mean\"  \\\n","0                                           0.000028                         \n","1                                           0.000036                         \n","2                                           0.000050                         \n","\n","   total_acc_x__change_quantiles__f_agg_\"var\"__isabs_False__qh_0.8__ql_0.2  \\\n","0                                       9.339141e-07                         \n","1                                       9.280706e-07                         \n","2                                       1.854071e-06                         \n","\n","   total_acc_x__quantile__q_0.8  ...  \\\n","0                      1.020574  ...   \n","1                      1.020773  ...   \n","2                      1.022051  ...   \n","\n","   total_acc_y__binned_entropy__max_bins_10  body_gyro_z__variance  \\\n","0                                  2.119114               0.000035   \n","1                                  2.067352               0.000055   \n","2                                  2.107271               0.000077   \n","\n","   body_gyro_z__change_quantiles__f_agg_\"mean\"__isabs_True__qh_1.0__ql_0.0  \\\n","0                                           0.002761                         \n","1                                           0.002545                         \n","2                                           0.003002                         \n","\n","   total_acc_x__number_peaks__n_1  total_acc_y__longest_strike_above_mean  \\\n","0                            34.0                                     9.0   \n","1                            30.0                                    17.0   \n","2                            29.0                                    19.0   \n","\n","   body_gyro_x__change_quantiles__f_agg_\"var\"__isabs_True__qh_0.4__ql_0.0  \\\n","0                                           0.000004                        \n","1                                           0.000009                        \n","2                                           0.000006                        \n","\n","   body_acc_x__fourier_entropy__bins_5  \\\n","0                             0.079487   \n","1                             0.891060   \n","2                             0.948691   \n","\n","   body_gyro_x__cwt_coefficients__coeff_0__w_20__widths_(2, 5, 10, 20)  \\\n","0                                           0.022398                     \n","1                                           0.022625                     \n","2                                           0.043031                     \n","\n","   body_gyro_x__change_quantiles__f_agg_\"var\"__isabs_True__qh_1.0__ql_0.2  \\\n","0                                           0.000007                        \n","1                                           0.000009                        \n","2                                           0.000010                        \n","\n","   label  \n","0    5.0  \n","1    5.0  \n","2    5.0  \n","\n","[3 rows x 631 columns]"],"text/html":["\n","  <div id=\"df-1341a272-ac22-4670-bfe7-e4d1717cb5f8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>total_acc_x__c3__lag_1</th>\n","      <th>body_acc_x__agg_linear_trend__attr_\"stderr\"__chunk_len_5__f_agg_\"max\"</th>\n","      <th>total_acc_x__change_quantiles__f_agg_\"mean\"__isabs_True__qh_1.0__ql_0.6</th>\n","      <th>total_acc_x__c3__lag_3</th>\n","      <th>total_acc_x__cwt_coefficients__coeff_14__w_20__widths_(2, 5, 10, 20)</th>\n","      <th>total_acc_x__cwt_coefficients__coeff_11__w_20__widths_(2, 5, 10, 20)</th>\n","      <th>total_acc_x__mean_n_absolute_max__number_of_maxima_7</th>\n","      <th>total_acc_x__agg_linear_trend__attr_\"stderr\"__chunk_len_5__f_agg_\"mean\"</th>\n","      <th>total_acc_x__change_quantiles__f_agg_\"var\"__isabs_False__qh_0.8__ql_0.2</th>\n","      <th>total_acc_x__quantile__q_0.8</th>\n","      <th>...</th>\n","      <th>total_acc_y__binned_entropy__max_bins_10</th>\n","      <th>body_gyro_z__variance</th>\n","      <th>body_gyro_z__change_quantiles__f_agg_\"mean\"__isabs_True__qh_1.0__ql_0.0</th>\n","      <th>total_acc_x__number_peaks__n_1</th>\n","      <th>total_acc_y__longest_strike_above_mean</th>\n","      <th>body_gyro_x__change_quantiles__f_agg_\"var\"__isabs_True__qh_0.4__ql_0.0</th>\n","      <th>body_acc_x__fourier_entropy__bins_5</th>\n","      <th>body_gyro_x__cwt_coefficients__coeff_0__w_20__widths_(2, 5, 10, 20)</th>\n","      <th>body_gyro_x__change_quantiles__f_agg_\"var\"__isabs_True__qh_1.0__ql_0.2</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.059088</td>\n","      <td>0.000045</td>\n","      <td>0.001088</td>\n","      <td>1.059019</td>\n","      <td>2.244303</td>\n","      <td>1.947003</td>\n","      <td>1.022925</td>\n","      <td>0.000028</td>\n","      <td>9.339141e-07</td>\n","      <td>1.020574</td>\n","      <td>...</td>\n","      <td>2.119114</td>\n","      <td>0.000035</td>\n","      <td>0.002761</td>\n","      <td>34.0</td>\n","      <td>9.0</td>\n","      <td>0.000004</td>\n","      <td>0.079487</td>\n","      <td>0.022398</td>\n","      <td>0.000007</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.059527</td>\n","      <td>0.000045</td>\n","      <td>0.001119</td>\n","      <td>1.059577</td>\n","      <td>2.240700</td>\n","      <td>1.943727</td>\n","      <td>1.023272</td>\n","      <td>0.000036</td>\n","      <td>9.280706e-07</td>\n","      <td>1.020773</td>\n","      <td>...</td>\n","      <td>2.067352</td>\n","      <td>0.000055</td>\n","      <td>0.002545</td>\n","      <td>30.0</td>\n","      <td>17.0</td>\n","      <td>0.000009</td>\n","      <td>0.891060</td>\n","      <td>0.022625</td>\n","      <td>0.000009</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.060862</td>\n","      <td>0.000062</td>\n","      <td>0.001578</td>\n","      <td>1.060927</td>\n","      <td>2.240934</td>\n","      <td>1.943291</td>\n","      <td>1.025791</td>\n","      <td>0.000050</td>\n","      <td>1.854071e-06</td>\n","      <td>1.022051</td>\n","      <td>...</td>\n","      <td>2.107271</td>\n","      <td>0.000077</td>\n","      <td>0.003002</td>\n","      <td>29.0</td>\n","      <td>19.0</td>\n","      <td>0.000006</td>\n","      <td>0.948691</td>\n","      <td>0.043031</td>\n","      <td>0.000010</td>\n","      <td>5.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 631 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1341a272-ac22-4670-bfe7-e4d1717cb5f8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1341a272-ac22-4670-bfe7-e4d1717cb5f8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1341a272-ac22-4670-bfe7-e4d1717cb5f8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3db006bf-06e5-46cb-abd2-3ff2b6ec30b2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3db006bf-06e5-46cb-abd2-3ff2b6ec30b2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3db006bf-06e5-46cb-abd2-3ff2b6ec30b2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"match_ef_forest"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["test_match_forest.head(3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"id":"QF3wN5CeDnPh","executionInfo":{"status":"ok","timestamp":1716159484144,"user_tz":300,"elapsed":314,"user":{"displayName":"Josué Arbulú Pastor","userId":"04973568037788770706"}},"outputId":"362e99d6-66c8-454c-ff8e-a83d42aa2193"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   total_acc_x__c3__lag_1  \\\n","0                0.981002   \n","1                0.980078   \n","2                0.978917   \n","\n","   body_acc_x__agg_linear_trend__attr_\"stderr\"__chunk_len_5__f_agg_\"max\"  \\\n","0                                           0.000390                       \n","1                                           0.000205                       \n","2                                           0.000061                       \n","\n","   total_acc_x__change_quantiles__f_agg_\"mean\"__isabs_True__qh_1.0__ql_0.6  \\\n","0                                           0.008833                         \n","1                                           0.002854                         \n","2                                           0.001747                         \n","\n","   total_acc_x__c3__lag_3  \\\n","0                0.978210   \n","1                0.979589   \n","2                0.978793   \n","\n","   total_acc_x__cwt_coefficients__coeff_14__w_20__widths_(2, 5, 10, 20)  \\\n","0                                           2.177899                      \n","1                                           2.182376                      \n","2                                           2.192611                      \n","\n","   total_acc_x__cwt_coefficients__coeff_11__w_20__widths_(2, 5, 10, 20)  \\\n","0                                           1.895720                      \n","1                                           1.899693                      \n","2                                           1.902698                      \n","\n","   total_acc_x__mean_n_absolute_max__number_of_maxima_7  \\\n","0                                           1.037090      \n","1                                           1.014657      \n","2                                           0.999870      \n","\n","   total_acc_x__agg_linear_trend__attr_\"stderr\"__chunk_len_5__f_agg_\"mean\"  \\\n","0                                           0.000397                         \n","1                                           0.000134                         \n","2                                           0.000049                         \n","\n","   total_acc_x__change_quantiles__f_agg_\"var\"__isabs_False__qh_0.8__ql_0.2  \\\n","0                                           0.000020                         \n","1                                           0.000003                         \n","2                                           0.000003                         \n","\n","   total_acc_x__quantile__q_0.8  ...  body_gyro_y__fourier_entropy__bins_5  \\\n","0                      1.004614  ...                              0.658456   \n","1                      0.996878  ...                              0.295163   \n","2                      0.994977  ...                              0.427420   \n","\n","   total_acc_y__binned_entropy__max_bins_10  body_gyro_z__variance  \\\n","0                                  1.971262               0.000942   \n","1                                  2.067802               0.000318   \n","2                                  2.059185               0.000194   \n","\n","   body_gyro_z__change_quantiles__f_agg_\"mean\"__isabs_True__qh_1.0__ql_0.0  \\\n","0                                           0.010928                         \n","1                                           0.004763                         \n","2                                           0.005714                         \n","\n","   total_acc_x__number_peaks__n_1  total_acc_y__longest_strike_above_mean  \\\n","0                            31.0                                    11.0   \n","1                            31.0                                    18.0   \n","2                            29.0                                    37.0   \n","\n","   body_gyro_x__change_quantiles__f_agg_\"var\"__isabs_True__qh_0.4__ql_0.0  \\\n","0                                           0.000121                        \n","1                                           0.000009                        \n","2                                           0.000008                        \n","\n","   body_acc_x__fourier_entropy__bins_5  \\\n","0                             0.848607   \n","1                             0.966750   \n","2                             0.422533   \n","\n","   body_gyro_x__cwt_coefficients__coeff_0__w_20__widths_(2, 5, 10, 20)  \\\n","0                                           0.417012                     \n","1                                           0.061474                     \n","2                                          -0.041052                     \n","\n","   body_gyro_x__change_quantiles__f_agg_\"var\"__isabs_True__qh_1.0__ql_0.2  \n","0                                           0.000706                       \n","1                                           0.000151                       \n","2                                           0.000021                       \n","\n","[3 rows x 630 columns]"],"text/html":["\n","  <div id=\"df-dca1f1ec-c50d-4c67-ab6f-4d35d72ab444\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>total_acc_x__c3__lag_1</th>\n","      <th>body_acc_x__agg_linear_trend__attr_\"stderr\"__chunk_len_5__f_agg_\"max\"</th>\n","      <th>total_acc_x__change_quantiles__f_agg_\"mean\"__isabs_True__qh_1.0__ql_0.6</th>\n","      <th>total_acc_x__c3__lag_3</th>\n","      <th>total_acc_x__cwt_coefficients__coeff_14__w_20__widths_(2, 5, 10, 20)</th>\n","      <th>total_acc_x__cwt_coefficients__coeff_11__w_20__widths_(2, 5, 10, 20)</th>\n","      <th>total_acc_x__mean_n_absolute_max__number_of_maxima_7</th>\n","      <th>total_acc_x__agg_linear_trend__attr_\"stderr\"__chunk_len_5__f_agg_\"mean\"</th>\n","      <th>total_acc_x__change_quantiles__f_agg_\"var\"__isabs_False__qh_0.8__ql_0.2</th>\n","      <th>total_acc_x__quantile__q_0.8</th>\n","      <th>...</th>\n","      <th>body_gyro_y__fourier_entropy__bins_5</th>\n","      <th>total_acc_y__binned_entropy__max_bins_10</th>\n","      <th>body_gyro_z__variance</th>\n","      <th>body_gyro_z__change_quantiles__f_agg_\"mean\"__isabs_True__qh_1.0__ql_0.0</th>\n","      <th>total_acc_x__number_peaks__n_1</th>\n","      <th>total_acc_y__longest_strike_above_mean</th>\n","      <th>body_gyro_x__change_quantiles__f_agg_\"var\"__isabs_True__qh_0.4__ql_0.0</th>\n","      <th>body_acc_x__fourier_entropy__bins_5</th>\n","      <th>body_gyro_x__cwt_coefficients__coeff_0__w_20__widths_(2, 5, 10, 20)</th>\n","      <th>body_gyro_x__change_quantiles__f_agg_\"var\"__isabs_True__qh_1.0__ql_0.2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.981002</td>\n","      <td>0.000390</td>\n","      <td>0.008833</td>\n","      <td>0.978210</td>\n","      <td>2.177899</td>\n","      <td>1.895720</td>\n","      <td>1.037090</td>\n","      <td>0.000397</td>\n","      <td>0.000020</td>\n","      <td>1.004614</td>\n","      <td>...</td>\n","      <td>0.658456</td>\n","      <td>1.971262</td>\n","      <td>0.000942</td>\n","      <td>0.010928</td>\n","      <td>31.0</td>\n","      <td>11.0</td>\n","      <td>0.000121</td>\n","      <td>0.848607</td>\n","      <td>0.417012</td>\n","      <td>0.000706</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.980078</td>\n","      <td>0.000205</td>\n","      <td>0.002854</td>\n","      <td>0.979589</td>\n","      <td>2.182376</td>\n","      <td>1.899693</td>\n","      <td>1.014657</td>\n","      <td>0.000134</td>\n","      <td>0.000003</td>\n","      <td>0.996878</td>\n","      <td>...</td>\n","      <td>0.295163</td>\n","      <td>2.067802</td>\n","      <td>0.000318</td>\n","      <td>0.004763</td>\n","      <td>31.0</td>\n","      <td>18.0</td>\n","      <td>0.000009</td>\n","      <td>0.966750</td>\n","      <td>0.061474</td>\n","      <td>0.000151</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.978917</td>\n","      <td>0.000061</td>\n","      <td>0.001747</td>\n","      <td>0.978793</td>\n","      <td>2.192611</td>\n","      <td>1.902698</td>\n","      <td>0.999870</td>\n","      <td>0.000049</td>\n","      <td>0.000003</td>\n","      <td>0.994977</td>\n","      <td>...</td>\n","      <td>0.427420</td>\n","      <td>2.059185</td>\n","      <td>0.000194</td>\n","      <td>0.005714</td>\n","      <td>29.0</td>\n","      <td>37.0</td>\n","      <td>0.000008</td>\n","      <td>0.422533</td>\n","      <td>-0.041052</td>\n","      <td>0.000021</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 630 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dca1f1ec-c50d-4c67-ab6f-4d35d72ab444')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dca1f1ec-c50d-4c67-ab6f-4d35d72ab444 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dca1f1ec-c50d-4c67-ab6f-4d35d72ab444');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3ae63cd6-78bf-4b1e-8fb6-07aa3e4edacf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3ae63cd6-78bf-4b1e-8fb6-07aa3e4edacf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3ae63cd6-78bf-4b1e-8fb6-07aa3e4edacf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test_match_forest"}},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["## Decision Tree"],"metadata":{"id":"WqGUnOiposEP"}},{"cell_type":"code","source":["class DecisionTree:\n","    def __init__(self, max_depth=None, min_samples_split=2, n_features=None):\n","        self.max_depth = max_depth\n","        self.min_samples_split = min_samples_split\n","        self.n_features = n_features\n","\n","    def fit(self, X, y):\n","        self.n_classes = len(set(y))\n","        self.features = X.shape[1]\n","        self.tree = self._grow_tree(X, y)\n","\n","    def predict(self, X):\n","        return np.array([self._predict(inputs) for inputs in X])\n","\n","    def _grow_tree(self, X, y, depth=0):\n","        n_samples, n_features = X.shape\n","        if n_samples < self.min_samples_split or depth >= self.max_depth or len(set(y)) == 1:\n","            return self._most_common_label(y)\n","\n","        feat_idxs = np.random.choice(n_features, self.n_features, replace=False)\n","        best_feat, best_thresh = self._best_criteria(X, y, feat_idxs)\n","\n","        if best_feat is None:\n","            return self._most_common_label(y)\n","\n","        left_idxs, right_idxs = self._split(X[:, best_feat], best_thresh)\n","        if len(left_idxs) == 0 or len(right_idxs) == 0:\n","            return self._most_common_label(y)\n","\n","        left = self._grow_tree(X[left_idxs, :], y[left_idxs], depth + 1)\n","        right = self._grow_tree(X[right_idxs, :], y[right_idxs], depth + 1)\n","        return (best_feat, best_thresh, left, right)\n","\n","    def _best_criteria(self, X, y, feat_idxs):\n","        best_gain = -1\n","        split_idx, split_thresh = None, None\n","        for feat_idx in feat_idxs:\n","            X_column = X[:, feat_idx]\n","            thresholds = np.unique(X_column)\n","            for threshold in thresholds:\n","                gain = self._information_gain(y, X_column, threshold)\n","                if gain > best_gain:\n","                    best_gain = gain\n","                    split_idx = feat_idx\n","                    split_thresh = threshold\n","        return split_idx, split_thresh\n","\n","    def _information_gain(self, y, X_column, split_thresh):\n","        parent_entropy = self._entropy(y)\n","        left_idxs, right_idxs = self._split(X_column, split_thresh)\n","\n","        if len(left_idxs) == 0 or len(right_idxs) == 0:\n","            return 0\n","\n","        n, n_left, n_right = len(y), len(left_idxs), len(right_idxs)\n","        e_left, e_right = self._entropy(y[left_idxs]), self._entropy(y[right_idxs])\n","        child_entropy = (n_left / n) * e_left + (n_right / n) * e_right\n","\n","        ig = parent_entropy - child_entropy\n","        return ig\n","\n","    def _split(self, X_column, split_thresh):\n","        left_idxs = np.argwhere(X_column <= split_thresh).flatten()\n","        right_idxs = np.argwhere(X_column > split_thresh).flatten()\n","        return left_idxs, right_idxs\n","\n","    def _entropy(self, y):\n","        hist = np.bincount(y)\n","        ps = hist / len(y)\n","        return -np.sum([p * np.log2(p) for p in ps if p > 0])\n","\n","    def _most_common_label(self, y):\n","        counter = np.bincount(y)\n","        return np.argmax(counter)\n","\n","    def _predict(self, inputs):\n","        node = self.tree\n","        while isinstance(node, tuple):\n","            if inputs[node[0]] <= node[1]:\n","                node = node[2]\n","            else:\n","                node = node[3]\n","        return node"],"metadata":{"id":"zyjBk6RSaChb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Random Forest"],"metadata":{"id":"VClVSm7LovME"}},{"cell_type":"code","source":["class RandomForest:\n","    def __init__(self, n_trees=100, max_depth=None, min_samples_split=2, max_features='sqrt', n_jobs=1):\n","        self.n_trees = n_trees\n","        self.max_depth = max_depth\n","        self.min_samples_split = min_samples_split\n","        self.max_features = max_features\n","        self.n_jobs = n_jobs\n","        self.trees = []\n","\n","    def fit(self, X, y):\n","        self.trees = []\n","        self.n_features = X.shape[1]\n","        if self.max_features == 'sqrt':\n","            self.n_features = int(np.sqrt(self.n_features))\n","        elif self.max_features == 'log2':\n","            self.n_features = int(np.log2(self.n_features))\n","        elif isinstance(self.max_features, int):\n","            self.n_features = self.max_features\n","\n","        with Pool(processes=self.n_jobs) as pool:\n","            self.trees = pool.map(self._fit_tree, [(X, y) for _ in range(self.n_trees)])\n","\n","    def _fit_tree(self, data):\n","        X, y = data\n","        tree = DecisionTree(max_depth=self.max_depth, min_samples_split=self.min_samples_split, n_features=self.n_features)\n","        X_sample, y_sample = self._bootstrap_sample(X, y)\n","        tree.fit(X_sample, y_sample)\n","        return tree\n","\n","    def predict(self, X):\n","        tree_preds = np.array([tree.predict(X) for tree in self.trees])\n","        tree_preds = np.swapaxes(tree_preds, 0, 1)\n","        y_pred = [np.bincount(tree_pred).argmax() for tree_pred in tree_preds]\n","        return np.array(y_pred)\n","\n","    def _bootstrap_sample(self, X, y):\n","        n_samples = X.shape[0]\n","        idxs = np.random.choice(n_samples, n_samples, replace=True)\n","        return X[idxs], y[idxs]"],"metadata":{"id":"FYPKxdCM8_MZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_cpus = psutil.cpu_count(logical=False)  # Contar solo los núcleos físicos\n","print(\"Número de núcleos de CPU físicos disponibles:\", num_cpus)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jr0pPzOxisnm","executionInfo":{"status":"ok","timestamp":1716160204006,"user_tz":300,"elapsed":307,"user":{"displayName":"Josué Arbulú Pastor","userId":"04973568037788770706"}},"outputId":"5e476ebb-8674-412a-eaca-56de5e356bbf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Número de núcleos de CPU físicos disponibles: 1\n"]}]},{"cell_type":"markdown","source":["## Probando nuestro modelo"],"metadata":{"id":"tnkml8oYoyKQ"}},{"cell_type":"code","source":["\n","# Dividir el conjunto de datos en entrenamiento y prueba\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","forest = RandomForest(n_trees=25, max_depth=15, max_features='sqrt', n_jobs=1) #15 , 10\n","\n","start_time = time.time()\n","forest.fit(X_train, y_train)\n","end_time = time.time()\n","\n","\n","training_duration = end_time - start_time\n","print(\"Duración del entrenamiento:\", training_duration, \"segundos\")\n","\n","y_pred = forest.predict(X_test)\n","\n","    # Evaluar la precisión del modelo\n","    accuracy = np.mean(y_pred == y_test)\n","    print(f'Accuracy: {accuracy * 100:.2f}%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"60UyRC6LaS24","executionInfo":{"status":"ok","timestamp":1716162037519,"user_tz":300,"elapsed":1828114,"user":{"displayName":"Josué Arbulú Pastor","userId":"04973568037788770706"}},"outputId":"024a780b-1fa5-49b9-9f82-4e808e1d1ecf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Duración del entrenamiento: 1827.386033296585 segundos\n","Accuracy: 98.37%\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"p7MUDOP1De3-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_test = test_match_forest\n","# Separar características (X) y etiquetas (y)\n","X_test = scaler.transform(df_test)\n","y_pred = forest.predict(X_test)\n","y_pred"],"metadata":{"id":"fmQVNwvf7Hw_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1716162120666,"user_tz":300,"elapsed":298,"user":{"displayName":"Josué Arbulú Pastor","userId":"04973568037788770706"}},"outputId":"76ae0571-1edb-4827-d40b-de8c6a7a0a23"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but StandardScaler was fitted without feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([5, 5, 5, ..., 2, 2, 2])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["def generate_csv(Y_pred, name_csv=\"predictions.csv\"):\n","    # Convertir el arreglo a un DataFrame de Pandas\n","    df_prediccion = pd.DataFrame({\"y\": Y_pred})\n","\n","    # Crear una serie de Pandas con IDs incrementales\n","    ids = pd.Series(range(1, len(df_prediccion) + 1), name=\"ID\")\n","\n","    # Insertar la serie de IDs\n","    df_prediccion.insert(0, \"ID\", ids)\n","\n","    df_prediccion.to_csv(name_csv, index=False)\n","\n","generate_csv(y_pred)"],"metadata":{"id":"Tkwh718fGO8a"},"execution_count":null,"outputs":[]}]}